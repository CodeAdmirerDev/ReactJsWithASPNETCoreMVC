Practicing JSX through different scenarios can help strengthen your understanding of its syntax and usage in React applications. Below are various practice scenarios ranging from basic to advanced levels, each designed to test and reinforce your knowledge.

Basic Level Scenarios

Rendering Simple JSX Elements:
==============================
Create a functional component called Greeting that takes a name prop and displays a greeting message.

const Greeting = ({ name }) => {  
  return <h1>Hello, {name}!</h1>;  
};  

Using Expressions in JSX:
=========================
Create a component AgeMessage that displays a message based on a person's age.
For example, if the age is greater than 18, display "You are an adult.", otherwise, display "You are a minor."

const AgeMessage = ({ age }) => {  
  return <p>{age > 18 ? "You are an adult." : "You are a minor."}</p>;  
};  

Creating a Function to Render List Items:
=========================================

Create a functional component called ItemList that takes an array of items and renders them as an unordered list.

const ItemList = ({ items }) => {  
  return (  
    <ul>  
      {items.map((item, index) => (  
        <li key={index}>{item}</li>  
      ))}  
    </ul>  
  );  
};  

Intermediate Level Scenarios:
=============================
Handling Events in JSX

Create a Counter component that includes a button to increment a count.
Display the current count as well.

const Counter = () => {  
  const [count, setCount] = React.useState(0);  

  const increment = () => {  
    setCount(count + 1);  
  };  

  return (  
    <div>  
      <p>Current Count: {count}</p>  
      <button onClick={increment}>Increment</button>  
    </div>  
  );  
};  

Conditional Rendering

Create a LoginStatus component that accepts a boolean prop called isLoggedIn. Render different messages depending on the login status.
const LoginStatus = ({ isLoggedIn }) => {  
  return (  
    <div>  
      {isLoggedIn ? (  
        <p>Welcome back!</p>  
      ) : (  
        <p>Please log in.</p>  
      )}  
    </div>  
  );  
};  

Styling with Inline Styles and CSS Classes

Create a StyledButton component that takes label, color, and size as props. Use inline styles to set the background color and padding.

const StyledButton = ({ label, color, size }) => {  
  const style = {  
    backgroundColor: color,  
    padding: size === 'large' ? '10px 20px' : '5px 10px',  
  };  

  return <button style={style}>{label}</button>;  
};  

Advanced Level Scenarios
========================

Creating a Form Component

Build a ContactForm component that accepts a name, email, and message. Implement controlled input fields and handle form submission.

const ContactForm = () => {  
  const [name, setName] = React.useState('');  
  const [email, setEmail] = React.useState('');  
  const [message, setMessage] = React.useState('');  

  const handleSubmit = (e) => {  
    e.preventDefault();  
    alert(`Name: ${name}, Email: ${email}, Message: ${message}`);  
  };  

  return (  
    <form onSubmit={handleSubmit}>  
      <input  
        type="text"  
        placeholder="Name"  
        value={name}  
        onChange={(e) => setName(e.target.value)}  
      />  
      <input  
        type="email"  
        placeholder="Email"  
        value={email}  
        onChange={(e) => setEmail(e.target.value)}  
      />  
      <textarea  
        placeholder="Message"  
        value={message}  
        onChange={(e) => setMessage(e.target.value)}  
      />  
      <button type="submit">Send</button>  
    </form>  
  );  
};  

Combining Multiple Components
=============================

Create a UserProfile component that displays user information (name, email, age) and includes a nested Address component that renders the address details.

const Address = ({ street, city }) => {  
  return (  
    <div>  
      <p>Street: {street}</p>  
      <p>City: {city}</p>  
    </div>  
  );  
};  

const UserProfile = ({ user }) => {  
  return (  
    <div>  
      <h1>{user.name}</h1>  
      <p>Email: {user.email}</p>  
      <p>Age: {user.age}</p>  
      <Address street={user.address.street} city={user.address.city} />  
    </div>  
  );  
};  

Using Context API for State Management
======================================

Create a light/dark mode toggle using React Context. Create a ThemeContext that provides the current theme and a function to toggle it. Use this context in a ThemeToggle component to switch themes.
const ThemeContext = React.createContext();  

const ThemeProvider = ({ children }) => {  
  const [theme, setTheme] = React.useState('light');  

  const toggleTheme = () => {  
    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));  
  };  

  return (  
    <ThemeContext.Provider value={{ theme, toggleTheme }}>  
      {children}  
    </ThemeContext.Provider>  
  );  
};  

const ThemeToggle = () => {  
  const { theme, toggleTheme } = React.useContext(ThemeContext);  

  return (  
    <button onClick={toggleTheme}>  
      Switch to {theme === 'light' ? 'dark' : 'light'} mode  
    </button>  
  );  
};  

Additional Practice Scenarios
=============================

Higher-Order Components (HOC)

Create a withLoading higher-order component that wraps another component and displays a loading message until data is loaded.
const withLoading = (WrappedComponent) => {  
  return ({ isLoading, ...props }) => {  
    if (isLoading) {  
      return <p>Loading...</p>;  
    }  
    return <WrappedComponent {...props} />;  
  };  
};  

const MyComponent = () => <div>Data has been loaded!</div>;  

const EnhancedComponent = withLoading(MyComponent);  

Advanced Form Handling with Validation
=======================================

Build a RegistrationForm where the name must be at least 2 characters, and the email must be valid. Show error messages for invalid inputs.

const RegistrationForm = () => {  
  const [name, setName] = React.useState('');  
  const [email, setEmail] = React.useState('');  
  const [errors, setErrors] = React.useState({});  

  const validateEmail = (email) => /^\S+@\S+\.\S+$/.test(email);  

  const handleSubmit = (e) => {  
    e.preventDefault();  
    const newErrors = {};  
    if (name.length < 2) newErrors.name = "Name must be at least 2 characters.";  
    if (!validateEmail(email)) newErrors.email = "Email is not valid.";  
    setErrors(newErrors);  
    if (Object.keys(newErrors).length === 0) {  
      alert(`Registered with Name: ${name}, Email: ${email}`);  
    }  
  };  

  return (  
    <form onSubmit={handleSubmit}>  
      <input  
        type="text"  
        placeholder="Name"  
        value={name}  
        onChange={(e) => setName(e.target.value)}  
      />  
      {errors.name && <p>{errors.name}</p>}  
      <input  
        type="email"  
        placeholder="Email"  
        value={email}  
        onChange={(e) => setEmail(e.target.value)}  
      />  
      {errors.email && <p>{errors.email}</p>}  
      <button type="submit">Register</button>  
    </form>  
  );  
};  

Summary
Practicing JSX through these scenarios will help you to:

Understand how to create and manipulate components.
Use props and state effectively.
Implement event handling, conditional rendering, and styling.
Gain familiarity with more advanced topics such as context and higher-order components.
Try implementing these components in a React application, and modify them to further your understanding and discover additional complexities within JSX and React!
